{"version":3,"sources":["ng://@zip/web.components/lib/directives/href/href.directive.ts","ng://@zip/web.components/lib/directives/numeric-input/numeric-input.directive.ts","ng://@zip/web.components/lib/directives/numeric-input/numeric-input.ts","ng://@zip/web.components/lib/directives/router-back/router-back.directive.ts","ng://@zip/web.components/lib/pipes/formatContent/format-content.pipe.ts","ng://@zip/web.components/lib/components/header-cart/header-cart.component.ts","ng://@zip/web.components/lib/components/header/header.component.ts","ng://@zip/web.components/lib/components/icon/icon.component.ts","ng://@zip/web.components/lib/components.constants.ts","ng://@zip/web.components/lib/components/input/input.component.ts","ng://@zip/web.components/lib/components/input-notice/input-notice.animation.ts","ng://@zip/web.components/lib/components/input-notice/input-notice.component.ts","ng://@zip/web.components/lib/components/logo/logo.component.ts","ng://@zip/web.components/lib/components/panel/panel.component.ts","ng://@zip/web.components/lib/components/panel-heading/panel-heading.component.ts","ng://@zip/web.components/lib/components/loading-spinner/loading-spinner.component.ts","ng://@zip/web.components/lib/components.module.ts","ng://@zip/web.components/lib/validators/match/match.validator.ts","ng://@zip/web.components/lib/validators/not-in/not-in.validator.ts","ng://@zip/web.components/lib/validators/index.ts","ng://@zip/web.components/lib/services/component/component-instance.model.ts","ng://@zip/web.components/lib/services/component/component.service.ts"],"names":["HrefDirective","prototype","onClick","window","location","assign","this","zipHref","Directive","args","selector","Input","HostListener","NumericInputDirective","ngOnInit","_this","control","valueChanges","subscribe","value","numericInputIfValid","writeFunction","match","replace","u","valueAccessor","writeValue","NgControl","RouterBackDirective","ngLocation","back","Location","FormatContentPipe","transform","str","Error","word","has","JSON","stringify","string","number","Pipe","name","HeaderCartComponent","Object","defineProperty","parsedAmount","parseFloat","toFixed","Component","template","items","HeaderComponent","HeaderLeftComponent","HeaderRightComponent","HeaderCenterComponent","IconComponent","icon","HostBinding","constants","invalidInput","InputComponent","formControl","status","touched","errors","keys","map","validationError","errorMessages","setValue","onChangeCallback","registerOnChange","fn","registerOnTouched","onTouchedCallback","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","label","placeholder","type","iconLeft","iconRight","FormControl","noticeAnimation","trigger","transition","animate","keyframes","style","opacity","InputNoticeComponent","color","animations","zip","zipmoney","zippay","LogoComponent","logo","LogoType","PanelComponent","PanelHeadingComponent","LoadingSpinnerComponent","ZipWebComponentsModule","NgModule","imports","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","declarations","exports","matchValidator","stringControlToMatch","notInValidator","invalidValues","includes","notIn","CustomValidators","ComponentInstance","componentRef","rootNodes","setProp","key","instance","onEvent","callback","subscriptions","add","onDestroy","destroyActions","push","destroy","unsubscribe","forEach","action","Subscription","ComponentService","instantiate","component","componentFactoryResolver","resolveComponentFactory","create","injector","appRef","attachView","hostView","detachView","Injectable","providedIn","ComponentFactoryResolver","ApplicationRef","Injector"],"mappings":"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","sourcesContent":["import { Directive, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[zipHref]'\n})\nexport class HrefDirective {\n    @Input()\n    public zipHref = '';\n\n    @HostListener('click', ['$event'])\n    onClick() {\n        window.location.assign(this.zipHref);\n    }\n}\n","import { Directive, OnInit } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { numericInputIfValid } from './numeric-input';\n\n@Directive({\n    selector: '[zipNumericInput]'\n})\nexport class NumericInputDirective implements OnInit {\n    constructor(private control: NgControl) { }\n\n    ngOnInit() {\n        this.control.valueChanges.subscribe(value =>\n            numericInputIfValid(value, (u) => this.control.valueAccessor.writeValue(u))\n        );\n    }\n}\n","export function numericInputIfValid(value, writeFunction) {\n    if (!value.match(/\\D/g)) {\n        return;\n    }\n    writeFunction(value.replace(/\\D/g, ''));\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { Location } from '@angular/common';\n\n@Directive({\n  selector: '[zipRouterBack]'\n})\nexport class RouterBackDirective {\n    constructor(\n        private ngLocation: Location\n    ) {}\n\n    @HostListener('click', ['$event'])\n    onClick() {\n        this.ngLocation.back();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { has } from 'lodash';\nimport { string, number } from 'check-types';\n\n/*\n    - Template Usage -\n\n    const str = 'Lorem {{value}}'\n    const args = { value: 'ipsum' }\n\n    <div>\n        {{ str | formatContent: args }}\n    </div>\n*/\n\n@Pipe({ name: 'formatContent' })\nexport class FormatContentPipe implements PipeTransform {\n    transform(str, args) {\n        if (!str) {\n            return '';\n        }\n\n        if (!args) {\n            throw Error('No arguments provided');\n        }\n\n        return str.replace(/{{(\\w+)}}/g, (match, word) => {\n            if (!has(args, word)) {\n                throw Error(`${word} was not found in the dictionary ${JSON.stringify(args)}`);\n            }\n            if (!string(args[word]) && !number(args[word])) {\n                throw Error(`Arguments must be a string or number ${JSON.stringify(args)}`);\n            }\n            return args[word];\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'zip-header-cart',\n    template: `\n        <div>{{ items }}</div>\n        <zip-icon src=\"cart\"></zip-icon>\n        <p>{{ parsedAmount }}</p>\n    `,\n    styleUrls: ['./header-cart.component.scss']\n})\nexport class HeaderCartComponent {\n    public parsedAmount = '00.00';\n\n    @Input()\n    public items = 0;\n\n    @Input()\n    public set amount(value) {\n        this.parsedAmount = parseFloat(value).toFixed(2);\n    }\n    public get amount() {\n        return this.parsedAmount;\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'zip-header',\n  template: `\n    <div class=\"left\">\n        <ng-content select=\"zip-header-left\"></ng-content>\n    </div>\n    <div class=\"center\">\n        <ng-content select=\"zip-header-center\"></ng-content>\n    </div>\n    <div class=\"left\">\n        <ng-content select=\"zip-header-right\"></ng-content>\n    </div>\n  `,\n  styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent { }\n\n\n@Component({\n    selector: 'zip-header-left',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./header-position.component.scss']\n})\nexport class HeaderLeftComponent { }\n\n\n@Component({\n    selector: 'zip-header-right',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./header-position.component.scss']\n})\nexport class HeaderRightComponent { }\n\n\n@Component({\n    selector: 'zip-header-center',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./header-position.component.scss']\n  })\n  export class HeaderCenterComponent { }\n","import { Component, Input, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'zip-icon',\n  template: '',\n  styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent {\n    @HostBinding('class') icon = '';\n    @Input() set src(value) {\n        this.icon = `zip-icon zip-icon-${value}`;\n    }\n}\n","export const constants = {\n    cdn: 'https://zip.co/assets/',\n    toasts: {\n        defaultDurationMilliseconds: 5000\n    },\n    messages: {\n        invalidInput: 'Invalid Input'\n    }\n};\n","import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl } from '@angular/forms';\nimport { constants } from '../../components.constants';\n\n@Component({\n    selector: 'zip-input',\n    templateUrl: './input.component.html',\n    styleUrls: ['./input.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputComponent),\n            multi: true\n        }\n    ]\n})\nexport class InputComponent implements ControlValueAccessor {\n    @Input() label = '';\n    @Input() placeholder = '';\n    @Input() type = 'text';\n    @Input() iconLeft = '';\n    @Input() iconRight = '';\n    @Input() formControl = new FormControl();\n    @Input() errorMessages = {};\n    @Input() value = '';\n\n    get pending() {\n        return this.formControl.status === 'PENDING';\n    }\n\n    get invalid() {\n        return this.formControl.touched && this.formControl.status === 'INVALID';\n    }\n\n    get error() {\n        if (!this.formControl.errors) {\n            return null;\n        }\n        const error = Object.keys(this.formControl.errors)\n            .map(validationError => this.errorMessages[validationError])[0];\n\n        return error || constants.messages.invalidInput;\n    }\n\n    writeValue(value: any) {\n        if (value === this.formControl.value) {\n            return;\n        }\n        this.formControl.setValue(value);\n        this.onChangeCallback(value);\n    }\n\n    registerOnChange(fn: any) {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this.onTouchedCallback = fn;\n    }\n\n    onTouchedCallback: () => void = () => { };\n    private onChangeCallback: (_: any) => void = () => { };\n}\n","import { AnimationTriggerMetadata, trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\nexport const noticeAnimation = [\n    trigger('in-out', [\n        transition(':enter', [\n            animate('250ms ease-in',\n                keyframes([\n                    style({\n                        opacity: 0,\n                        transform: 'translate3d(0, 5px, 0)'\n                    }),\n                    style({\n                        opacity: 1,\n                        transform: 'translate3d(0, 0, 0)'\n                    })\n                ]))\n        ]),\n        transition(':leave', [\n            animate('250ms ease-in',\n                keyframes([\n                    style({\n                        opacity: 1,\n                        transform: 'translate3d(0, 0, 0)'\n                    }),\n                    style({\n                        opacity: 0,\n                        transform: 'translate3d(0, 5px, 0)'\n                    })\n                ]))\n        ]),\n    ]\n    )];\n","import { Component, Input, Output, EventEmitter, HostBinding } from '@angular/core';\nimport { noticeAnimation } from './input-notice.animation';\n\n@Component({\n    selector: 'zip-input-notice',\n    template: '{{ message }}',\n    styleUrls: ['./input-notice.component.scss'],\n    animations: noticeAnimation\n})\nexport class InputNoticeComponent {\n    @HostBinding('class') color;\n    @HostBinding('@in-out')\n\n    @Input() message;\n    @Input() set theme(value) {\n        this.color = value;\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nexport enum LogoType {\n  zip,\n  zipmoney,\n  zippay\n}\n\n@Component({\n  selector: 'zip-logo',\n  templateUrl: './logo.component.html',\n  styleUrls: ['./logo.component.scss']\n})\nexport class LogoComponent {\n  @Input()\n  public logo: LogoType = LogoType.zip;\n\n  public get logoMap() {\n    return `https://zip.co/assets/zip/logos/${this.logo}/primary.svg`;\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'zip-panel',\n    templateUrl: './panel.component.html',\n    styleUrls: ['./panel.component.scss']\n})\n\nexport class PanelComponent { }\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'zip-panel-heading',\n    templateUrl: './panel-heading.component.html',\n    styleUrls: ['./panel-heading.component.scss']\n})\n\nexport class PanelHeadingComponent {}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'zip-loading-spinner',\n    templateUrl: './loading-spinner.component.html',\n    styleUrls: ['./loading-spinner.component.scss']\n})\n\nexport class LoadingSpinnerComponent { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { HrefDirective } from './directives/href/href.directive';\nimport { NumericInputDirective } from './directives/numeric-input/numeric-input.directive';\nimport { RouterBackDirective } from './directives/router-back/router-back.directive';\n\nimport { FormatContentPipe } from './pipes/formatContent/format-content.pipe';\nimport { HeaderCartComponent } from './components/header-cart/header-cart.component';\nimport { HeaderCenterComponent } from './components/header/header.component';\nimport { HeaderComponent, HeaderLeftComponent, HeaderRightComponent } from './components/header/header.component';\nimport { IconComponent } from './components/icon/icon.component';\nimport { InputComponent } from './components/input/input.component';\nimport { InputNoticeComponent } from './components/input-notice/input-notice.component';\nimport { LogoComponent } from './components/logo/logo.component';\nimport { PanelComponent } from './components/panel/panel.component';\nimport { PanelHeadingComponent } from './components/panel-heading/panel-heading.component';\nimport { LoadingSpinnerComponent } from './components/loading-spinner/loading-spinner.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    declarations: [\n        HrefDirective,\n        NumericInputDirective,\n        RouterBackDirective,\n        FormatContentPipe,\n        HeaderCartComponent,\n        HeaderCenterComponent,\n        HeaderComponent,\n        HeaderLeftComponent,\n        HeaderRightComponent,\n        IconComponent,\n        InputComponent,\n        InputNoticeComponent,\n        LogoComponent,\n        PanelComponent,\n        PanelHeadingComponent,\n        LoadingSpinnerComponent\n    ],\n    exports: [\n        HrefDirective,\n        NumericInputDirective,\n        RouterBackDirective,\n        FormatContentPipe,\n        HeaderCartComponent,\n        HeaderCenterComponent,\n        HeaderComponent,\n        HeaderLeftComponent,\n        HeaderRightComponent,\n        IconComponent,\n        InputComponent,\n        InputNoticeComponent,\n        LogoComponent,\n        PanelComponent,\n        PanelHeadingComponent,\n        LoadingSpinnerComponent\n    ]\n})\nexport class ZipWebComponentsModule {}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport function matchValidator(stringControlToMatch: AbstractControl): ValidatorFn {\n    return (control: AbstractControl) => {\n        const areNotEqual = control.value !== stringControlToMatch.value;\n        if (areNotEqual) {\n            return { match: { value: control.value } };\n        }\n    };\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { includes } from 'lodash';\n\nexport function notInValidator(invalidValues: any[]): ValidatorFn {\n    return (control: AbstractControl) => {\n        if (includes(invalidValues, control.value)) {\n            return { notIn: { value: control.value } };\n        }\n    };\n}\n","import { matchValidator } from './match/match.validator';\nimport { notInValidator } from './not-in/not-in.validator';\n\nexport class CustomValidators {\n    static match = matchValidator;\n    static notIn = notInValidator;\n}\n","import { Subscription } from 'rxjs';\nimport { ComponentRef, EmbeddedViewRef } from '@angular/core';\n\nexport class ComponentInstance<T> {\n    private subscriptions = new Subscription();\n    private destroyActions = [];\n\n    get element() {\n        return (this.componentRef.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n    }\n\n    constructor(\n        private componentRef: ComponentRef<T>,\n    ) {}\n\n    setProp(key: string, value: any) {\n        if (!key || !value) {\n            return this;\n        }\n        this.componentRef.instance[key] = value;\n        return this;\n    }\n\n    onEvent(key: string, callback: (...args: any) => any) {\n        if (!key || !callback) {\n            return this;\n        }\n        if (!this.componentRef.instance[key]) {\n            return this;\n        }\n        this.subscriptions.add(\n            this.componentRef.instance[key].subscribe(callback)\n        );\n        return this;\n    }\n\n    onDestroy(callback: () => void) {\n        this.destroyActions.push(callback);\n        return this;\n    }\n\n    destroy() {\n        this.subscriptions.unsubscribe();\n        this.componentRef.destroy();\n        this.destroyActions.forEach(action => action());\n        this.destroyActions = [];\n    }\n}\n","import { Injectable, Injector, ComponentFactoryResolver, EmbeddedViewRef, ApplicationRef } from '@angular/core';\nimport { ComponentInstance } from './component-instance.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ComponentService {\n\n    constructor(\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector\n    ) {}\n\n    instantiate<T = any>(component: any) {\n        const componentRef = this.componentFactoryResolver\n            .resolveComponentFactory<T>(component)\n            .create(this.injector);\n\n        this.appRef.attachView(componentRef.hostView);\n\n        const instance = new ComponentInstance<T>(\n            componentRef\n        );\n\n        instance.onDestroy(\n            () => this.appRef.detachView(componentRef.hostView)\n        );\n\n        return instance;\n    }\n}\n"]}